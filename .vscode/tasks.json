{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    
    // Обязательное свойство, указывающее на версию схемы tasks.json
    "version": "2.0.0", 

    // Массив, содержащий определения всех ваших задач
    "tasks": [
        {
            /*
                Задача для сборки вашей программы поиска на C++.
                Эта задача компилирует все необходимые файлы исходного кода (.cpp)
                с указанием стандарта C++17 и компонует их в один исполняемый файл.
            */
            
            // Метка задачи (отображается в меню VS Code "Run Build Task")
            "label": "build search program", 

            // Тип задачи: запуск внешней команды (компилятора) в оболочке терминала
            "type": "shell", 

            // Команда, которую нужно выполнить (ваш компилятор)
            // Используйте "g++" или "clang++" в зависимости от того, что установлено и используется у вас
            "command": "g++", 

            // Аргументы команды (флаги компилятора и список файлов)
            "args": [
                "-g", // Включает отладочную информацию (полезно при отладке)
                "-Wall", // Включает большинство стандартных предупреждений
                "-Wextra", // Включает дополнительные предупреждения
                // Если у вас были другие флаги предупреждений или отладки из вывода ошибки, можете добавить их здесь

                // *** КЛЮЧЕВОЙ ФЛАГ! *** Указывает компилятору использовать стандарт C++17
                // Без этого флага фичи C++11/14/17/20 работать не будут или вызовут ошибки/предупреждения.
                "-std=c++17", 

                // Перечислите ВСЕ файлы исходного кода (.cpp), которые нужно скомпилировать и скомпоновать
                // Убедитесь, что указаны правильные пути к этим файлам относительно места запуска команды (обычно корень проекта VS Code).
                // Если ваши .cpp файлы находятся в поддиректориях (например, utils/utils.cpp),
                // вам, возможно, придется указать их как "utils/utils.cpp", "Brute_Force_algorithm/naive_search.cpp" и т.д.
                "main.cpp",    
                "utils.cpp",
                "naive_search.cpp",
                "rabin_karp.cpp",

                "-o",          // Флаг для указания имени выходного исполняемого файла
                "program"      // <-- *** Имя вашего исполняемого файла *** (Вы можете выбрать любое имя)
            ],

            // Группа задач: указывает, что это задача сборки
            "group": {
                "kind": "build",
                "isDefault": true // Сделать эту задачу задачей сборки по умолчанию (запускается по Ctrl+Shift+B)
            },

            // Сопоставитель проблем: позволяет VS Code парсить вывод компилятора
            // и отображать ошибки и предупреждения в панели "Проблемы".
            "problemMatcher": [
                "$gcc" // Используйте "$gcc", если команда "g++", или "$clang", если команда "clang++"
            ],

            // Необязательное описание задачи, отображаемое в меню VS Code
            "detail": "Сборка многофайлового проекта C++" 
        }

        // Если у вас были другие задачи (например, старая задача "echo"), их можно удалить 
        // или оставить здесь, если они нужны.
    ]
}